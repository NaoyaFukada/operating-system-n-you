Tilde (~) symbol: 
  - the tilde (~) symbol represents the home directory, which is typically something like C:\Users\[YourUsername]. 
    So when you type cd ~, no matter where you are in the file system, this command will take you directly back to your home directory.
Tab completion:
  - Tab completion is a feature in PowerShell that helps to autocomplete file names and directories. When you start typing a path or 
    filename, pressing the Tab key will automatically complete the name based on what's available in the current directory. 
    If there are multiple files or folders that start with the same letters you've typed, continuing to press Tab will cycle through 
    all the available options. This feature saves time and reduces errors in typing long file paths or names.
Ctrl-R:
  - This is a keyboard shortcut used for searching through your command history. When you press Ctrl-R, it activates a reverse search mode 
    where you can type a part of a command, and PowerShell will display matching commands from your history. This feature allows you to 
    quickly find and reuse previously executed commands without having to retype them, making it a convenient tool for recalling complex 
    commands or sequences you've used before.
cp *.jpg {path}: 
  - The command cp *.jpg {path} in PowerShell is used to copy all JPEG files from the current directory to a specified path. 
    The *.jpg part uses a wildcard pattern (*) that matches any file name ending with .jpg, allowing you to copy all JPEG files 
    in one command. The {path} should be replaced with the destination where you want these files to be copied.
Wildcard: 
  - This is a character used to replace or represent one or more characters in a string. The most common wildcards are the asterisk (*) 
    and the question mark (?). The asterisk matches any number of characters (including zero), while the question mark matches exactly one 
    character. Wildcards are extremely useful in file manipulation commands for matching groups of files.
Recurse: 
  - The "-Recurse" parameter in PowerShell commands with cp (Copy-Item) instructs the command to operate not only on the specified items 
    but also on all items in its subdirectories. This is particularly useful when dealing with folders, as it ensures that all nested files 
    and subfolders are included in the operation. Without -Recurse, a command that involves a directory will only act on the directory itself 
    and not its contents.
Verbose: 
  - The "-Verbose" parameter in PowerShell provides detailed information about the operation being performed. When used with a command, 
    it causes the command to give more detailed output, such as indicating each action it performs or each file it processes. 
    This is especially useful for tracking what a script or command is doing, particularly for troubleshooting or for understanding 
    the behavior of a script.
Get-Alias:
  - This is used to display the actual cmdlet (command) that an alias represents. PowerShell aliases are essentially shorthand or nicknames 
    for the longer cmdlet names. When you use an alias in PowerShell, it's a convenient way to call a more complex or verbose cmdlet without 
    having to type out the full name.
  - For example, if you use the alias ls in PowerShell, it's actually an alias for the Get-ChildItem cmdlet. Using Get-Alias ls will reveal 
    this association. This command helps you understand what's happening behind the scenes when you use these shorter aliases, and it's 
    particularly useful for learning the actual PowerShell cmdlets associated with the more familiar, often Unix-like, command names.

Search Files:
  - Select-String (sls) in PowerShell: 
    - This is a PowerShell command used to search for text patterns in files. It's a versatile tool that can find words, phrases, or more 
      complex patterns defined by regular expressions. For instance, if you run "Select-String cow farm-animal.txt", it will search for the 
      word "cow" in the file farm-animal.txt.
  - Pattern Matching with Select-String: 
    - When you want to search through multiple files, you can use pattern matching. For example, Select-String cow *.txt searches for the 
      word "cow" in all .txt files in the current directory. The asterisk (*) is a wildcard character that represents any number of 
      characters, allowing you to search across multiple files.
  - Search Filter:
    - The "-Filter" parameter is used to specify a search pattern for file names. When you use this parameter, PowerShell filters the results 
      to include only those files that match the pattern you've provided. For example, if you use -Filter *.exe, PowerShell will return only 
      the files with an .exe extension. The asterisk (*) in *.exe acts as a wildcard, meaning it will match any characters preceding 
      the .exe extension. This parameter is efficient because it applies the filter at the source, reducing the amount of data that PowerShell 
      needs to process further.

Input and Output:
  - I/O Streams (Input/Output Streams): 
    - These are the channels through which a process communicates with its environment. Every process in Windows, including PowerShell 
      commands, has access to these streams to take input and produce output. They facilitate the flow of data into and out of a process, 
      much like water flows in a river.
    - Stdin (Standard Input): 
      - This is the input stream through which a process receives data. In a command-line interface (CLI), the standard input typically comes 
        from the keyboard or from another process's output. For example, when you type a command in PowerShell, you are providing input 
        through Stdin.
    - Stdout (Standard Output): 
      - Stdout is the primary output stream where a process sends its output data. By default, the output is displayed on the screen in the 
        CLI. However, you can redirect this output to other destinations, like a file or another process.
    - Stderr (Standard Error): 
      - This is the output stream specifically used for error messages. If a process encounters an error, the details of that error are sent 
        to Stderr. Like Stdout, Stderr can also be redirected to different destinations, such as a file or to be ignored altogether.
  - 1 (Stdout): 
    - The number 1 is often used to explicitly refer to the Stdout stream. In redirection commands, specifying 1> means redirecting the 
      standard output. However, this is usually optional as Stdout is the default output stream.
  - 2 (Stderr): 
    - The number 2 is used to represent the Stderr stream. In redirection commands, using 2> allows you to redirect the error messages to a 
      different destination. This is useful for handling errors separately from the regular output.
  


